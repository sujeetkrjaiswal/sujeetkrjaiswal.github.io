{"version":3,"sources":["motionEffect.js"],"names":[],"mappings":"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","file":"motionEffect.js","sourcesContent":["/*\n\tExpected constructor\n\t1. Canvas ID :[Mandatory]\n\t2. Config Obj : [Optional]\n\t\tkey:value[default] [Explanation]\n\t\t{\t\n\t\t\tcolor\t: '#F9B379' Color of each Dot\n\t\t\trad \t: 4\t\t\tSize of circle radius in pixels\n\t\t\tdis \t: 10000\t\tSquare of Max Distance between two points\n\t\t}\n*/\nclass ConstalationEffect{\n\t/*\n\t\tList of intance variables used in the class\n\t\t1. canvasId\n\t\t2. mouse\n\t\t3. context\n\t\t4. particles\n\n\n\t\tList of function under this class\n\t\t[Format of comment\n\t\t\tX. Functions\n\t\t\t\ty. helper functions\n\t\t]\n\t\t1. initializeDefaults\n\t\t\ta. addParticle\n\n\t*/\n\tconstructor(canvasId,config){\n\t\tthis.canvasId = canvasId;\n\t\tlet {color='#F9B379',rad=4,dis=100} = config;\n\t\tthis.config = {\n\t\t\tMAX_DIST_SQ:dis*dis,\n\t\t\tDOT_COLOR:color,\n\t\t\tCIR_RAD:rad\n\t\t}\n\t\t//console.log('config',this.config)\n\t\t//Initialize the particles with default position\n\t\tthis.initializeDefaults();\n\t}\n\t//HELPER FUNCTION FOR initializeDefaults\n\taddParticle(){\n\t\t\n\t\t/*\n\t\t\tHelper function for initializeDefaults\n\t\t\tThis will generate the required data for a single particle\n\n\t\t\tx: denotes the x coordinate of position\n\t\t\ty: denotes the y coordinate of position\n\t\t\tvx: denotes the velocity in x direction\n\t\t\tvy: denotes the velocity in y direction\n\t\t\tsize: denotes the size of the dot in pixel\n\t\t\tcolor: denotes the color of the dot\n\t\t\thistory: array of \n\t\t*/\n\t\treturn {\n\t\t\tx:Math.random()*window.innerWidth,\n\t\t\ty:Math.random()*window.innerHeight,\n\t\t\tvx:Math.random()*0.1,\n\t\t\tvy:-1*Math.random()*0.5,\n\t\t\tsize: 2,\n\t\t\tcolor: \"#F9B379\",\n\t\t\thistory: []\t\t\t\n\t\t}\n\t}\n\tinitializeDefaults(){\n\t\t/*\n\t\tThis function does the following\n\t\t\t1. initialize mouse postion coordinate object\n\t\t\tThis function will initialize the particles to\n\t\t\ta random position all over the canvas and values\n\t\t*/\n\t\t//1. Setting up mouse postion object\n\t\tthis.mouse = {\n\t\t\tx:0, //x-coordinate of mouse position\n\t\t\ty:0  //y-coordinate of mouse position\n\t\t}\n\t\t//2. Setting up the canvas\n\t\tthis.canvas = document.getElementById(this.canvasId);\n\t\tthis.context = this.canvas.getContext('2d');\n\t\tthis.context.strokeStyle = this.config.DOT_COLOR;\n\t\tthis.context.fillStyle = this.config.DOT_COLOR;\n\t\t//3. Setting up particles\n\t\tthis.particles = [];\n\t\t\t//set number of particles based on screen size\n\t\tlet dots = Math.floor(window.innerWidth/25);\n\t\t\t//Adding particles in the array (equal to number of dots)\n\t\tfor(let i=0;i<dots;i++){\n\t\t\t//get the data for particle add push to particles array\n\t\t\tthis.particles.push(this.addParticle())\n\t\t}\n\t\t//4. Attaching event listners\n\t\t\t//Attach mouse move handler to enlarge dots\n\t\tthis.canvas.addEventListener('mousemove', (e)=>{this.mouseMoveHandler(e)}, false);\n\t\t\t//Attach window resize handler to adjust size of window\n\t\twindow.addEventListener('resize', (e)=>{this.resizeHandler(e)}, false);\n\t\t\t//Call a redraw according to frameRate\n\t\tsetInterval( ()=>{this.redraw()}, 20 );\n\t\tthis.context.beginPath();\n\t\tthis.resizeHandler();\t\n\n\t}\n\t//HELPER FUNCTION FOR REDRAW -> disBtwSq\n\tdisBtwSq(p1,p2){\n\t\t/*\t\n\t\t\tAccepts two point object each having x and y coordinate\n\t\t\tReturns square of distance between two given points\n\t\t\tp1 | p2 => {\n\t\t\t\tx: X-Coordinate of the dot\n\t\t\t\ty: Y-Coordinate of the dot\n\t\t\t}\n\t\t\tdx = p2.x-p1.x\n\t\t\tdy = p2.y-p1.y\n\t\t\tdistance = (dx^2+dx^2)^(1/2)\n\t\t\t^ denotes power [^2 - Square :: ^(1/2) - Square root] \n\t\t\twill return (dx^2+dx^2)\n\t\t*/\n\n\t\treturn Math.pow(p2.x-p1.x,2)+Math.pow(p2.y-p1.y,2);\n\t}\n\t//HELPER FUNCTION FOR REDRAW\n\tdrawLine(p1,p2){\n\t\t/*\n\t\t\tDraw line between the two points.\n\t\t\tThe opacity of line is based on the distance between the points\n\t\t\tIf the distance is more than the MAX_DIST_SQ, we will not draw\n\t\t*/\n\t\tlet dist = this.disBtwSq(p1,p2);\n\t\tif(dist < this.config.MAX_DIST_SQ){\n\t\t\tthis.context.moveTo(p1.x,p1.y);\n\t\t\tlet dirx = p1.x > p2.x ? p1.x : p2.x;\n\t\t\tlet diry = p1.y < p2.y ? p1.y : p2.y;\n\t\t\t/*\n\t\t\t\tUnderstanding quadraticCurve\n\t\t\t\tpoint1 : x1,y1 [Move to]\n\t\t\t\tpoint2 : x2,y2\n\t\t\t\tcontrol Point : x3,y3 => x3=max(x1,x2) & y3=min(y1,y2)\n\t\t\t\tquadraticCurveTo(x3,y3,x2,y2)\n\t\t\t*/\n\t\t\tthis.context.quadraticCurveTo(dirx,diry,p2.x,p2.y);\n\t\t\tthis.context.strokeStyle = 'rgba(249,179,121,' + (1 - dist / this.config.MAX_DIST_SQ) +' )';\n\t\t}\n\t\t\t\t\n\t}\n\tdrawDot(particle){\n\t\t/*\n\t\t\tDraws the dots based on the distance between the mouse\n\t\t\tand the point. It is decided by distFact\n\t\t\t*/\n\t\tlet disFact = Math.sqrt(this.disBtwSq(this.mouse,particle));\n\t\tdisFact = Math.max( Math.min( 15 - ( disFact / 10 ), 10 ), 1 );\n\t\t\n\t\tthis.context.beginPath();\n\t\tthis.context.arc(particle.x,particle.y,particle.size*disFact,0,Math.PI*2)\n\t\tthis.context.closePath();\n\t\tthis.context.fill();\t\t\n\t}\n\t//HELPER FUNCTION FOR REDRAW -> updateParicle\n\tupdateParticle(p,maxWidth,maxHeight){\n\t\t/*\n\t\t\tTakes the following :\n\t\t\tparticle object : read and update in place\n\t\t\tmaxWidth : max boundary for particle (equals window.innerWidth)\n\t\t\tmaxHeight: max Y boundary for particle (equals window.innerHeight)\n\t\t\tUpdate the following properties of the particle\n\t\t\t1. X-Coordinate : based on the last add the speed in x-direction\n\t\t\t2. Y-Coordinate : based on the last add the speed in y-direction\n\t\t\t3. Speed in X direction : -ive for moving left and +ive for right\n\t\t\t4. Speed in Y directio : -ive for moving up and +ive for down\n\t\t */\n\t\t//1&2 - updating current position\n\t\tp.x += p.vx;\n\t\tp.y += p.vy;\n\t\t// updating velocity in x-direction\n\t\tif(p.x > maxWidth){\n\t\t\t//out of viewport on Right -> Bring to left (Vx = -ive)\n\t\t\tp.vx = -1-Math.random();\n\t\t}else if(p.x < 0){\n\t\t\t//out of viewport on Left -> Bring to Right (vx = +ive)\n\t\t\tp.vx = 1+Math.random();\n\t\t}else{\n\t\t\t//particle inside view port\n\t\t\t/* Increase or decrease the speed by some multiplier\n\t\t\t\tMath.random()-0.499 => 50% chances of +ive or -ive\n\t\t\t\t1 + someMultiplier => will increase or decrease proportionally\n\t\t\t\tsomeMultiplier = (+ive or -ive chance) * increment/decrement factor\n\t\t\t\t\n\t\t\t\tThis value is randomly choosen to suit the speed\n\t\t\t */\n\t\t\tp.vx *= 1+((Math.random()-0.499)*0.005);\n\t\t}\n\t\t//updating velocity in y-direction\n\t\tif(p.y > maxHeight){\n\t\t\t//out of view -> below the screen - bring above : speed -ive\n\t\t\tp.vy = -1-Math.random();\n\t\t}else if(p.y < 0){\n\t\t\t//out of view , above top. move to bootom and make spped 1\n\t\t\tp.y = maxHeight;\n\t\t\tp.vy = 1;\n\t\t}else{\n\t\t\t//in view. Randomize similar to velocity in x\n\t\t\tp.vx *= 1+((Math.random()-0.499)*0.005);\n\t\t}\n\t\t\n\t}\n\t/*\n\tgetConnMatrix(size){\n\t\t//Uses Object instead of Array\n\t\t//Which makes it faster \n\t\t//As accessing object is faster than Object\n\t\tlet connMatrix = {}\n\t\tfor(let i=0,len=size;i<len;i++){\n\t\t\tconnMatrix[i] = {}\n\t\t}\n\t\t/* Generated Matrix will be of following type\n\t\t\tOriginally created object will be\n\t\t\t{\n\t\t\t\t'0':{},\n\t\t\t\t'1':{}\n\t\t\t}\n\t\t\tSince all the properties will be undefined\n\t\t\taccessing connMatrix[0][1] == undefined == false\n\t\t\n\n\t\t * /\n\t\treturn connMatrix;\t\n\t}*/\n\tredraw(){\n\n\t\t/*\n\t\tThis will  redraw the cavas, by updating the\n\t\tparticle postions.\n\t\t*/\n\t\t//Clear the canvas before redrawing\n\t\tthis.context.clearRect(0,0,window.innerWidth,window.innerHeight);\n\t\t//Update all the particles\n\t\tlet maxWidth = window.innerWidth;\n\t\tlet maxHeight = window.innerHeight;\n\t\tthis.particles.forEach((particle,index,particles)=>{\n\t\t\tthis.updateParticle(particle,maxWidth,maxHeight);\n\t\t})\n\t\t\n\t\t/*\n\t\t\tTo draw lines between the points, we need to maintain the record\n\t\t\tof all the connected dots in a matrix.\n\t\t\tso if a is connected to b, (a,b) and (b,a) will become true\n\t\t */\t\t\t\t\n\t\t\n\t\t//Running a nested loop for particles\n\t\t//it matches every particle with other to draw else\n\t\tthis.particles.forEach((particle,rowIndex,arr)=>{\n\t\t\tthis.context.beginPath();\n\t\t\t\n\t\t\tfor(let colIndex=0;colIndex<rowIndex;colIndex++){\n\t\t\t\t/* Checking for only half of the matrix\n\t\t\t\t\tX | 0 | 1 | 2 | 3 | ...\n\t\t\t\t\t0   x   x   x   x   ...\n\t\t\t\t\t1   -   x   x   x   ...\n\t\t\t\t\t2   -   -   x   x   ...\n\t\t\t\t\t3   -   -   -   x   ...\n\t\t\t\t\t...\n\t\t\t\t\tThis will ensure the following\n\t\t\t\t\t1. No element is checked with itself \n\t\t\t\t\t2. for 2&1, only 2,1 will be processed not 1,2\n\t\t\t\t*/\n\t\t\t\t//Drow line if required between the two points\n\t\t\t\tthis.drawLine(particle,arr[colIndex]);\n\t\t\t}\n\t\t\tthis.context.stroke();\n\t\t\tthis.context.fillStyle = this.config.DOT_COLOR;\t\n\t\t\tthis.drawDot(particle);\n\t\t})\n\t\t\n\t\t\n\t}\n\t\n\tmouseMoveHandler(e){\n\t\t//Update the current mouse position in the mouse object\n\t\tthis.mouse.x = e.layerX;\n\t\tthis.mouse.y = e.layerY;\n\t}\n\t\n\tresizeHandler(e){\n\t\t//Resize the canvas according to current window size\n\t\tthis.canvas.width = window.innerWidth;\n\t\tthis.canvas.height = window.innerHeight;\n\t}\n}\n//export default ConstalationEffect;"],"sourceRoot":"/source/"}